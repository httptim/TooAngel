'use strict';

/* global MOVE ATTACK HEAL CARRY WORK RESOURCE_ENERGY */

const SpawnRole = require('./spawn-role');

module.exports = class ExploitSpawnRole extends SpawnRole {
	/**
	 * Adds exploit spawn options for the given room.
	 *
	 * @param {Room} room
	 *   The room to add spawn options for.
	 * @param {Object[]} options
	 *   A list of spawn options to add to.
	 */
	getSpawnOptions(room, options) {
		if (_.size(room.exploits) === 0) return;

		_.each(room.exploits, exploit => {
			this.addGuardianSpawnOptions(options, exploit);
			this.addBuilderSpawnOptions(options, exploit);

			const sourcesState = exploit.calculateSourcesState();
			this.addHarvesterSpawnOptions(options, exploit, sourcesState);
			this.addHaulerSpawnOptions(options, exploit, sourcesState);
		});
	}

	/**
	 * Spawns a guardian that travels around the room to keep sources safe.
	 *
	 * @param {Object[]} options
	 *   A list of spawn options to add to.
	 * @param {Exploit} exploit
	 *   The exploit to spawn creeps for.
	 */
	addGuardianSpawnOptions(options, exploit) {
		const numGuardians = _.size(_.filter(exploit.units.guardian, creep => creep.ticksToLive && creep.ticksToLive > (_.size(creep.body) * 3) + _.size(exploit.memory.pathToRoom) + 50));

		if (numGuardians > 0) return;

		// @todo Only spawn guardian if room is protected by source keepers.
		options.push({
			priority: 3,
			weight: 1,
			subRole: 'guardian',
			exploit: this.name,
		});
	}

	/**
	 * Spawn a builder to create a road network and containers.
	 *
	 * @param {Object[]} options
	 *   A list of spawn options to add to.
	 * @param {Exploit} exploit
	 *   The exploit to spawn creeps for.
	 */
	addBuilderSpawnOptions(options, exploit) {
		// @todo Filtering all construction sites is kind of slow.
		const numSites = _.size(_.filter(Game.constructionSites, site => site.pos.roomName === exploit.roomName));
		let maxBuilders = Math.ceil(numSites / 7);

		// Send a builder if containers are decaying too much.
		if (maxBuilders === 0 && exploit.memory.lairs) {
			for (const lairData of exploit.memory.lairs) {
				const source = Game.getObjectById(lairData.source);
				if (!source) continue;

				const container = source.getNearbyContainer();
				if (container && container.hits < container.hitsMax * 0.5) {
					maxBuilders = 1;
					break;
				}
			}
		}

		const numBuilders = _.size(_.filter(exploit.units.builder, creep => creep.ticksToLive && creep.ticksToLive > (_.size(creep.body) * 3) + _.size(exploit.memory.pathToRoom) + 50));
		if (numBuilders >= maxBuilders) return;

		options.push({
			priority: 3,
			weight: 0.5,
			subRole: 'builder',
			exploit: exploit.name,
		});
	}

	/**
	 * Decides how many harvesters should be spawned.
	 *
	 * @param {Object[]} options
	 *   A list of spawn options to add to.
	 * @param {Exploit} exploit
	 *   The exploit to spawn creeps for.
	 * @param {Object} sourcesState
	 *   The state of sources according to exploit.calculateSourcesState().
	 */
	addHarvesterSpawnOptions(options, exploit, sourcesState) {
		for (const source of sourcesState.sources) {
			const numHarvesters = _.filter(exploit.units.harvester, creep => creep.memory.fixedSource === source.id && (!creep.ticksToLive || creep.ticksToLive > (_.size(creep.body) * 3) + _.size(exploit.memory.pathToRoom) + 20)).length;

			if (numHarvesters > 0) continue;

			options.push({
				priority: 3,
				weight: 0.1,
				subRole: 'harvester',
				exploit: exploit.name,
				source: source.id,
				resourceType: source.mineralType || RESOURCE_ENERGY,
			});
		}
	}

	/**
	 * Decides how many haulers should be spawned.
	 *
	 * @param {Object[]} options
	 *   A list of spawn options to add to.
	 * @param {Exploit} exploit
	 *   The exploit to spawn creeps for.
	 * @param {Object} sourcesState
	 *   The state of sources according to exploit.calculateSourcesState().
	 */
	addHaulerSpawnOptions(options, exploit, sourcesState) {
		const production = sourcesState.sources.length * 4500 / 300;
		const productionAfterRoundTrip = 2 * sourcesState.pathLength * production;
		const neededWorkParts = productionAfterRoundTrip / 50;

		let totalWorkParts = 0;
		for (const creep of exploit.units.hauler || []) {
			totalWorkParts += creep.memory.body.carry || 0;
		}

		if (totalWorkParts >= neededWorkParts * 0.5) return;

		options.push({
			priority: 3,
			weight: 0,
			subRole: 'hauler',
			exploit: exploit.name,
		});
	}

	/**
	 * Gets the body of a creep to be spawned.
	 *
	 * @param {Room} room
	 *   The room to add spawn options for.
	 * @param {Object} option
	 *   The spawn option for which to generate the body.
	 *
	 * @return {string[]}
	 *   A list of body parts the new creep should consist of.
	 */
	getCreepBody(room, option) {
		if (option.subRole === 'guardian') {
			const body = new Array(50);
			_.fill(body, MOVE, 0, 25);
			_.fill(body, ATTACK, 25, 44);
			body[44] = MOVE;
			_.fill(body, HEAL, 45, 50);

			return body;
		}

		if (option.subRole === 'builder') {
			return this.generateCreepBodyFromWeights(
				{[MOVE]: 0.4, [CARRY]: 0.3, [WORK]: 0.3},
				Math.max(room.energyCapacityAvailable * 0.9, room.energyAvailable)
			);
		}

		if (option.subRole === 'harvester') {
			return this.generateCreepBodyFromWeights(
				{[MOVE]: 0.35, [CARRY]: 0.15, [WORK]: 0.5},
				Math.max(room.energyCapacityAvailable * 0.9, room.energyAvailable),
				option.resourceType === RESOURCE_ENERGY && {[WORK]: 9}
			);
		}

		if (option.subRole === 'hauler') {
			return this.generateCreepBodyFromWeights(
				{[MOVE]: 0.35, [CARRY]: 0.65},
				Math.max(room.energyCapacityAvailable * 0.9, room.energyAvailable)
			);
		}
	}

	/**
	 * Gets memory for a new creep.
	 *
	 * @param {Room} room
	 *   The room to add spawn options for.
	 * @param {Object} option
	 *   The spawn option for which to generate the body.
	 *
	 * @return {Object}
	 *   The boost compound to use keyed by body part type.
	 */
	getCreepMemory(room, option) {
		const memory = {
			exploitName: option.exploit,
			exploitUnitType: option.subRole,
		};

		if (option.subRole === 'guardian') memory.role = 'brawler';
		if (option.subRole === 'builder') memory.role = 'builder.exploit';
		if (option.subRole === 'hauler') memory.role = 'hauler.exploit';

		if (option.subRole === 'harvester') {
			memory.role = 'harvester.exploit';
			memory.fixedSource = option.source;
		}

		return memory;
	}
};
